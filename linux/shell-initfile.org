#+SETUPFILE: ~/.emacs.d/org-other-file/org-level-1.org
#+TITLE: shell的初始化文件
#+KEYWORDS: shell的初始化文件
#+LANGUAGE: zh-CN


* shell中的那些初始化文件

** .profile
是sh的配置文件. 
ksh兼容sh所以也会使用.profile

#+SETUPFILE: ~/.emacs.d/org-other-file/org-level-1.org
#+TITLE: emacs-tutorial
#+KEYWORDS: emacs, 
#+LANGUAGE: zh-CN
#+TAGS: 重要快捷键 一般快捷键

* 基本命令
 
1. Emacs 键盘命令通常包含 
   CONTROL 键（有时候以 CTRL 或 CTL 来标示）和
   META 键（有时候用 EDIT 或 ALT 来标示）
  
   1. 使用下述缩写：

      C-<chr>  表示当输入字符 <chr> 时按住 CONTROL 键
      C-f 就表示：按住 CONTROL 键再输入 f

   2. M-<chr>  表示当输入字符 <chr> 时按住 META（或 EDIT 或 ALT）键
      如果你的键盘上没有 META 、EDIT 或 ALT 键，用下述方法也等效：
      先按一下 ESC 键然后放开，再输入 <chr>
      我们用 <ESC> 来表示ESC 键

2. 重要提示：要退出 Emacs，请用 C-x C-c
   要退出一个正在运行中的命令，请用 C-g
   要退出什么东西直接最暴力的 Esc Esc Esc


* 一些小技巧
- 输入特殊字符
  按 C-x 8 R 可以输入 ®,°
  按 C-x 8 o 可以输入 °,
  按 C-x 8 C-h 可 以得到一份完整的列表.


* 比较重要的快捷键                                               :重要快捷键:
   C-v     向前移动一屏
   M-v     向后移动一屏
   C-l     重绘屏幕，并将光标所在行置于屏幕的中央

   C-M-v 向下移动隔壁窗口
   C-M-S-v 向上移动隔壁窗口

* 基本的光标控制（BASIC CURSOR CONTROL）

** 使用 C-p 、 C-b 、 C-f 和 C-n 这四个命令

  P N B F”四个字母分别代表了四个词
  P 代表 previous（上一行）
  N 代表 next（下一行）
  B 代表 backward（回退）
  F 则代表 forward（前进）


  当你移动光标穿越屏幕的上下边界时，在边界外的文字会移动到屏幕内，这称为
  “滚动”（scrolling）。滚动使得光标可以被移动到文字中的任何位置，并且还
  不会让光标跑到屏幕外边去。

** M-f (META-f) -- M-b (META)

M-f 会移动到这个词的末尾
如果光标处于词与词之间的空白处，M-f 会移动到下一个词的末尾
M-b 的功能类似，只是方向相反。



*** 请注意 C-f 、C-b 和 M-f 、M-b 两对之间的类比关系
  通常的惯例是
  META 系列组合键用来操作“由语言定义的单位（比如词、句子、段落）”
  CONTROL系列组合键用来操作“与语言无关的基本单位（比如字符、行等等）”。

** C-a 和 C-e 可以将光标移动到
  “一行”的头部和尾部；而 M-a 和 M-e 则将光标移动到“一句”的头部和尾部。

  想一想为什么重复的 C-a 命令会没有作用，而重复的 M-a 命令则会让光标不断
  地回退到上一个句子。虽然这个类比规律并不严格，但是很自然。




***  注意，在大部分键盘上，小于号（<）需要用上档键（Shift）来输入，所以在这
  些键盘上你应该用 Shift 键来输入 M-<，如果不按 Shift 键，你输入的会是
  M-comma（META 逗号）。

***  推荐你学习 C-b 、C-f 、C-n 、和 C-p
（1）它们在任何键盘上都能用。
（2）当你熟练使用 Emacs 之后，你会发现用这些组合键比用方向键要快得多，因为你的手不需要离开打字区。
（3）一旦你习惯了使用这些组合键，你也可以很容易地适应其它更高级的光标移动命令。

** C-u 然后输入数字作为参数，最后再输入命令
如果你有META （或EDIT 或 ALT）键，那么还有另一种办法：按住 META 键不放，然后输入数字。不过我们还是建议你用 C-u，因为它在任何终端机上都能用。这种数字参数也称为“前缀参数”，意思是说这个参数是先于使用它的命令而输入的。

  举例来说， C-u 8 C-f 会向前移动 8 个字符。


***  而 C-v 和 M-v 则属于另一种类型的例外。当给定一个参数时，它们将滚动你指
  定的“行数”，而不是“屏数”。举例来说，C-u 8 C-v 将文本向下滚动 8 行。
** 总结重要命令                                    :重要快捷键:光标移动相关:

  c-f     向右移动一个字符
  c-b     向左移动一个字符

  m-f     向右移动一个词【对中文是移动到下一个标点符号】
  m-b     向左移动一个词【对中文是移动到上一个标点符号】

  c-n     移动到下一行
  c-p     移动到上一行

  c-a     移动到行首
  c-e     移动到行尾

  m-a     移动到句首
  m-e     移动到句尾

  m-<    可以将光标移动到所有文字的最开头
  m->    可以将光标移动到所有文字的最末尾
  
  c-u 8   commacd 命令运行次数前缀
  C-M-v   scroll另外的缓冲区的屏幕

  M-x goto-line 移动到某行
  M-g M-g       移动到某行


** 如果 emacs 失去响应（if emacs stops responding）

  c-g 还可以取消数字参数和只输入到一半的命令。

  如果你不小心按了一下 <esc>，你也可以用 c-g 来取消它。
 
  这个说法似乎有问题，因为按照这个按键顺序输入的应该是 c-m-g  
  取消 <esc> 的正确做法是再连按两次 <esc>


* 窗格（WINDOWS）

Emacs 可以有多个“窗格”，每个窗格显示不同的文字

  C-x 1   只保留一个窗格（也就是关掉其它所有窗格）。


1. 把光标移到本行然后输入 C-u 0 C-l。

2. 输入 C-h k C-f。观察当一个新窗格出现时当前窗格（用来显示C-f 命令的文档）是如何缩小的。

3. 输入 C-x 1 关掉文档窗格。

4. 想要快速关掉可以 Esc 三联


* 插入与删除（INSERTING AND DELETING）

插入文字很简单，直接敲键盘就可以了
要插入一个换行符，输入 <Return>
（这个键在键盘上有时会被标注成“Enter”）。

你可以用 <DEL> 来删除光标左边的字符
这个键通常被标注为“Backspace”――跟Emacs 之外的用法应该一样，删除最后一个输入的字符。

你的键盘上可能有另外一个键，标注着 <Delete>，但那个不是我们所说的 <DEL>。

** 下面是一个关于“删除”操作的小结：                    :重要快捷键:删除相关:

<DEL>        删除光标前的一个字符
C-d          删除光标后的一个字符

M-<DEL>      移除光标前的一个词
M-d          移除光标后的一个词

C-k          移除从光标到“行尾”间的字符
M-k          移除从光标到“句尾”间的字符

可能你已经注意到了“删除（delete）”和“移除（kill）”的用词区别，后文会有详细说明
   

** copy,cut,paste

C-w -- 剪切

C-y -- 粘帖

M-w -- 复制

M-y -- 循环yank

M-w -- 复制当前行
 通过配置文件实现的M-w -- 复制当前行
 [[file:~/.emacs.d/loadfile/copy-cut-paste-killring.el]]
 这个配置文件有详细的教程


* 撤销（UNDO）                                          :重要快捷键:撤销相关:
 
用 undo 命令进行撤销：C-/

 1. 我绑定快捷键在F2了
    设置在这个配置文件中
    [[file:~/.emacs.d/loadfile/pengshao-key-building.el::12]]

 2. 但是有两个例外：
   1. 没有改变文字的命令不算（包括光标移动命令和滚动命令）
   2. 从键盘输入的字符以组为单位――每组最多 20 个字符――来进行处理。
   
 3. C-_和C-x u也是撤销命令
    C-_ 的作用跟 C-/ 一样,在某些终端上，输入 C-/ 实际上向 Emacs 发送的是"C-_"
    C-x u 和 C-/ 完全一样，但是按起来有些麻烦。

 4. 数字参数对于 C-/ 、 C-_ 和 C-x u 的意义是执行撤销的重复次数


* 文件（FILE）

1. 文件的打开和保存
   在屏幕的下方，你应该能够看到头部有短线“-”的一行，行首通常是一些诸如“
   -:--- TUTORIAL.cn”的文字，这些文字代表了你当前正在访问的文件。比如你现
   在正在访问的文件是对 Emacs 快速指南的一份临时拷贝，叫做“TUTORIAL.cn”。
   每当Emacs 寻找到一个文件，文件名就会出现在这个位置。

   C-x C-f   寻找一个文件
   C-x C-v   替换当前文件(如果有修改的话会提示是否存盘)

   文件被显示在了屏幕上，你可以开始编辑了。存盘用这条命令：

   C-x C-s   储存这个文件
   C-x C-w   另存为

   这条命令把 Emacs 中的文字存储到文件中
   第一次存盘的时候 Emacs 会将原文件重命名以备份
   重命名的规则通常是在原文件名之后添加一个“~”字符。
   
2. 备份相关<<自动保存配置文件>>  [[自动保存恢复]]
   
   我的备份相关文件
   [[file:~/.emacs.d/loadfile/pengshao-backup.el]]
   
   【对许多人来说，这是一个烦人的特性，关掉文件备份可以用如下命令：
   M-x customize-variable <Return> make-backup-files <Return>】


* 缓冲区（BUFFER）                                :重要快捷键:切换缓冲区相关:

   Emacs 把每个编辑中的文件都放在一个称为“缓冲区（buffer）”的地方

   所有的缓冲区：

   C-x C-b   列出缓冲区
   C-x b     切换缓冲区(关键字模式,直接RET默认是上一个)
   C-x o     循环切换缓冲区
   C-x s     保存多个缓冲区


* 命令集扩展（EXTENDING THE COMMAND SET）
   -----------------------------------------

   Emacs 的命令就像天上的星星，数也数不清。把它们都对应到 CONTROL 和 META
   组合键上显然是不可能的。Emacs 用扩展（eXtend）命令来解决这个问题，扩展
   命令有两种风格：

   C-x     字符扩展。  C-x 之后输入另一个字符或者组合键。
   M-x     命令名扩展。M-x 之后输入一个命令名。


   C-z 可以暂时离开 Emacs――当然，你还可以再回来。在允许 C-z 的系统中，C-z
   会把 Emacs“挂起”，也就是说，它会回到 shell但不杀死 Emacs 的进程。在常
   用的 shell 中，通常可以用“fg”或者“%emacs”命令再次回到 Emacs 中。


   C-x 的扩展命令有很多，下面列出的是你已经学过的：

   C-x C-f         寻找文件。
   C-x C-s         保存文件。
   C-x C-b         列出缓冲区。
   C-x C-c         离开 Emacs。
   C-x 1           关掉其它所有窗格，只保留一个。
   C-x u           撤销。


**   replace-string（字符串替换）                      :重要快捷键:替换相关:
   这个命令，它会把一个字符串替换成另一个.
   在输入 M-x 之后，Emacs 会在屏幕底端向你询问并等待你输入命令名


   字符串替换命令需要两个参数――被替换的字符串和用来替换它的字符串.每个
   参数的输入都以换行符来结束.

   将光标移到本行下面第二行的空白处，然后输入
   M-x repl s<Return>changed<Return>altered<Return>.

   


* 自动保存（AUTO SAVE）
   
[[自动保存配置文件]]  <<自动保存恢复>>

如果你已经修改了一个文件，但是还没来得及存盘你的计算机就罢工了，那么你
所做的修改就很可能会丢失.为了避免这样的不幸发生，Emacs 会定期将正在编
辑的文件写入一个“自动保存”文件中.自动保存文件的文件名的头尾各有一个
“#”字符，比如你正在编辑的文件叫“hello.c”，那么它的自动保存文件就叫
“#hello.c#”.这个文件会在正常存盘之后被 Emacs 删除.

所以，假如不幸真的发生了，你大可以从容地打开原来的文件（注意不是自动保
存文件）然后输入 M-x recover file <Return> 来恢复你的自动保存文件.在
提示确认的时候，输入 yes<Return>.


* 回显区（ECHO AREA）                                                :回显区:

   如果 Emacs 发现你输入多字符命令的节奏很慢，它会在窗格的下方称为“回显区”
   的地方给你提示.回显区位于屏幕的最下面一行.


* 状态栏（MODE LINE）                                            :状态栏相关:

   位于回显区正上方的一行被称为“状态栏”.状态栏上会显示一些信息，比如：

   -:**- TUTORIAL.cn 63% L749 (Fundamental)

   状态栏显示了 Emacs 的状态和你正在编辑的文字的一些信息.

   你应该知道文件名的意思吧？就是你找到的那个文件嘛.

   -NN%--    显示的是光标在全文中的位置.
   --Top--   位于文件的开头
   --Bot--   位于文件的末尾
   --All--   文件很小，一屏就足以显示全部内容

   “L” 和其后的数字给出了光标所在行的行号.
   这里我已经配置过显示列号和行号了,也在左边显示行号了
   [[file:~/.emacs.d/loadfile/pengshao-default.el]]

   最开头的星号（*）表示你已经对文字做过改动.刚刚打开的文件肯定没有被改动
   过，所以状态栏上显示的不是星号而是短线（-）.

   状态栏上小括号里的内容告诉你当前正在使用的编辑模式.缺省的模式是
   Fundamental，就是你现在正在使用的这个.它是一种“主模式”.

   Emacs 的主模式林林总总.有用来编辑程序代码的――比如 Lisp 模式；也有用
   来编辑各种自然语言文本的――比如 Text 模式.任何情况下只能应用一个主模
   式，其名称会显示在状态栏上，也就是现在显示“Fundamental”的地方.

   主模式通常会改变一些命令的行为.比方说，不管编辑什么语言的程序代码，你
   都可以用一个相同的命令来添加注释.但是在不同的语言中注释的语法往往是不
   同的，这时不同的主模式就会用各自不同的语法规则来添加注释.主模式都是可
   以用 M-x 启动的扩展命令，M-x fundamental-mode 就可以切换到 Fundamental
   模式.

   编辑自然语言文本――比如现在――应该用 Text 模式.

   >> 输入 M-x text-mode <Return>.

   别担心，什么都没变.不过细心一些可以发现，M-f 和 M-b 现在把单引号（'）
   视为词的一部分了.而在先前的 Fundamental 模式中，M-f 和 M-b 都将单引号
   视为分隔单词的符号.

   主模式通常都会搞一些类似的小动作，因为很多命令其实完成的是“相同的工
   作”，只是在不同环境下会有不同的工作方式而已.【所谓“求同存异”，在
   Emacs 里得到了很好的体现】

   用 C-h m 可以查看当前主模式的文档.


   主模式之所以称之为“主（major）”模式，是因为同时还有“辅模式”（minor
   mode）存在.辅模式并不能替代主模式，而是提供一些辅助的功能.每个辅模式
   都可以独立地开启和关闭，跟其它辅模式无关，跟主模式也无关.所以你可以不
   使用辅模式，也可以只使用一个或同时使用多个辅模式.

   有一个叫做自动折行（Auto Fill）的辅模式很有用，特别是在编辑自然语言文本
   的时候.启用自动折行后，Emacs 会在你打字超出一行边界时自动替你换行.

   用 M-x auto-fill-mode <Return> 启动自动折行模式.再用一次这条命令，自
   动折行模式会被关闭.也就是说，如果自动折行模式没有被开启，这个命令会开
   启它；如果已经开启了，这个命令会关闭它.所以我们说，这个命令可以用来
   “开关（toggle）”模式.

   >> 现在输入 M-x auto-fill-mode <Return>.然后随便敲点什么，直到你看到它
   分成两行.你必须敲一些空格，因为 Auto Fill 只在空白处进行断行.
   【输入空格对英文来说是必须的，而对中文则不必.】

   行边界通常被设定为 70 个字符【这里指英文字符】，你可以用 C-x f 命令配合
   数字参数来重新设定它.

   >> 输入 C-x f 并传递参数 20： C-u 2 0 C-x f.
   然后输入一些文字，观察 Emacs 的自动折行动作
   最后再用 C-x f 将边界设回 70.

   
   如果你在段落的中间做了一些修改，那么自动折行模式不会替你把整个段落重新
   折行，你需要用 M-q 手动折行.注意，光标必须位于你需要折行的那一段里.

   >> 移动光标到前一段中，然后输入 M-q.


* 搜索（SEARCHING）                                                :搜索相关:

   Emacs 可以向前或向后搜索字符串（“字符串”指的是一组连续的字符）.搜索命
   令是一个移动光标的命令：搜索成功后，光标会停留在搜索目标出现的地方.

   Emacs 的搜索命令是“渐进的（incremental）”.意思是搜索与输入同时进行：
   你在键盘上一字一句地输入搜索词的过程中，Emacs 就已经开始替你搜索了.

   C-s 是向前搜索
   C-r 是向后搜索

   在按下 C-s 之后，回显区里会有“I-search”字样出现，表明目前 Emacs 正处
   于“渐进搜索”状态，并等待你输入搜索字串.按 <Return> 可以结束搜索.

   >> 输入 C-s 开始一个搜索.注意敲慢一点，一次输入一个字符.
   慢慢输入“cursor”这个词，每敲一个字都停顿一下并观察光标.
   现在你应该已曾经找到“cursor”这个词了.
   >> 再按一次 C-s，搜索下一个“cursor”出现的位置.
   >> 现在按四次 <DEL> ，看看光标是如何移动的.
   >> 敲 <Return> 结束搜索.

   看仔细了么？在一次渐进式搜索中，Emacs 会尝试跳到搜索目标出现的位置.要
   跳到下一个命中位置，就再按一次 C-s.如果找不到目标，Emacs 会发出“哔”
   的一声，告诉你搜索失败.在整个过程中，都可以用 C-g 来终止搜索.【你会发
   现 C-g 会让光标回到搜索开始的位置，而 <Return> 则让光标留在搜索结果上，
   这是很有用的功能.】

   在渐进式搜索中，按 <DEL> 会“撤回”到最近一次搜索的命中位置.如果之前没
   有一个命中， <DEL> 会抹去搜索字符串中的最后一个字符.比如你已经输入了
   “c”，光标就停在“c”第一次出现的位置，再输入“u”，光标停在“cu”第一次出现
   的位置，这时再按 <DEL> ，“u”就从搜索字串中消失了，然后光标会回到“c”第
   一次出现的位置.

   另外，如果你在搜索的时候输入了 control 或者 meta 组合键的话，搜索可能会
   结束.（也有例外，比如 C-s 和 C-r 这些用于搜索的命令.）

   前面说的都是“向下”搜索，如果想“向上”搜索，可以用 C-r.C-r 与 C-s
   相比除了搜索方向相反之外，其余的操作都一样.


* 多窗格（MULTIPLE WINDOWS）                          :重要快捷键:多窗口相关:

Emacs 的迷人之处很多，能够在屏幕上同时显示多个窗格就是其中之一.

移动光标到这一行，然后输入 C-l C-l.

试试用 C-M-v 滚动下方的窗格.
如果你并没有 META 键，用 ESC C-v 也可以.
向上滚动是 C-M-S-v，也就是同时按住 CONTROL、META 和 SHIFT 再按 v

   如果你并没有 META 键，你也可以用 ESC 来代替，不过这样的话就要注意按键顺
   序了：你必须先输入 ESC ，然后再输入 CONTROL-v.CONTROL-ESC v 是没用的，
   因为 ESC 本身是一个字符键，而不是一个修饰键（modifier key）.

用下面的方法可以在一个新开窗格里打开文件：

   输入 C-x 4 C-f，紧跟着输入一个文件名，再用 <Return> 结束.
   可以看到你指定的文件出现在下方的窗格中，同时光标也跳到了那里.

   输入 C-x o 回到上方的窗格，然后再用 C-x 1 关掉下方窗格.


* 多窗口（MULTIPLE FRAMES）

   Emacs 可以创建多个窗口.窗口由许多窗格以及菜单、滚动条、回显区等组成.
   在图形界面下，多个窗口可以同时显示出来.在文本终端中，只能同时显示一个
   窗口.

   >> 输入 M-x make-frame <Return>.
   可以看到一个新的窗口出现在了你的屏幕上.

   你可以在新的窗口里做最初的窗口里可以做的任何事情.第一个窗口没有什么特
   别的.

   >> 输入 M-x delete-frame <Return>.
   这个命令将会关闭选中的窗口.

   你也可以通过图形系统来关闭某个窗口（通常是在窗口上面的某个角落里的一个
   “X”按钮）.如果你关闭的是 Emacs 进程的最后一个窗口， Emacs 将会退出.


* 递归编辑（RECURSIVE EDITING LEVELS）

   有时候你会进入所谓的“递归编辑”.递归编辑状态由位于状态栏的方括号所指
   示，其中包含了用小括号来指明的模式名称.比如说，你有时可能会看到
   [(Fundamental)]，而不是 (Fundamental).【比如在用 M-% 进行交互式替换的
   时候你又用了 C-s 进行搜索，这时替换模式并没有结束，但你又进入了搜索模式，
   这就是所谓的递归编辑.】

   离开递归编辑可以用 ESC ESC ESC.这是一个最通用的“离开”命令，你甚至可
   以使用它来关掉多余的窗格，或者离开小缓冲.

   >> 输入 M-x 进入小缓冲；然后输入 ESC ESC ESC 离开.

   你不能用 C-g 退出递归编辑，因为 C-g 的作用是取消“本层递归编辑之内”的
   命令和其参数（arguments）.


* 获得更多帮助（GETTING MORE HELP）
   -----------------------------------

   本快速指南的目的仅仅是帮助你在 Emacs 的海洋里下水，不至于束手无策望洋兴
   叹.有关 Emacs 的话题可谓汗牛充栋，这里自然是难尽万一.不过 Emacs 很理
   解你求知若渴的心情，因为它提供的强大功能实在是太多了.为此，Emacs 提供
   了一些命令来查看 Emacs 的命令文档，这些命令都以 CONTROL-h 开头，这个字
   符也因此被称为“帮助（Help）字符”.

   要使用帮助（Help）功能，请先输入 C-h，然后再输入一个字符以说明你需要什
   么帮助.如果你连自己到底需要什么帮助都不知道，那么就输入 C-h ?，Emacs
   会告诉你它能提供了哪些帮助.如果你按了 C-h 又想反悔，可以用 C-g 取消.

   （如果你按 C-h 之后没有任何帮助信息显示出来，那么试试 F1 键或者 M-x help <Return> .）

   最基本的帮助功能是 C-h c.输入 C-h c 之后再输入一个组合键，Emacs 会给出
   这个命令的简要说明.

   >> 输入 C-h c C-p.

   显示的消息应该会是这样：

   C-p runs the command previous-line

   这条消息显示了 C-p 命令对应的函数名.命令的功能由函数完成，所以函数名
   本身也可以被看成是最简单的文档――至少对于你已经学过的命令来说，它们的函
   数名足以解释它们的功能了.

   多字符命令一样可以用 C-h c 来查看.

   想得到更多的信息，请把 C-h c 换成 C-h k 试试看.

   >> 输入 C-h k C-p.

   上面的命令会新打开一个 Emacs 窗格以显示函数的名称及其文档.你读完之后可
   以用 C-x 1 关掉这个帮助窗格.当然你并不需要立即这样做，你完全可以先在编
   辑窗格里做点别的事情，然后再关掉帮助窗格.

   还有一些其它有用的 C-h 命令：

   C-h f        解释一个函数.需要输入函数名.

   >> 试试看，输入 C-h f previous-line <Return>.
   Emacs 会给出它所知道的所有有关“实现 C-p 命令功能的函数”的信息.

   C-h v 用来显示 Emacs 变量的文档.Emacs 变量可以被用来“定制 Emacs 的行
   为”.同样，你需要输入变量的名称.

   C-h a        相关命令搜索（Command Apropos）.
   输入一个关键词然后 Emacs 会列出所有命令名中包含此关键词
   的命令.这些命令全都可以用 M-x 来启动.对于某些命令来说，
   相关命令搜索还会列出一两个组合键.

   >> 输入 C-h a file <Return>.

   Emacs 会在另一个窗格里显示一个 M-x 命令列表，这个列表包含了所有名称中含
   有“file”的命令.你可以看到像“C-x C-f”这样的组合键显示在“find-file”
   这样的命令名的旁边.

   >> 用 C-M-v 来回滚动 help 窗格，多试几次.

   >> 输入 C-x 1 来删除 help 窗格.

   C-h i        阅读手册（也就是通常讲的 Info）.
   这个命令会打开一个称为“*info*”的特殊缓冲区，在那里，
   你可以阅读安装在系统里的软件包使用手册.要读 Emacs 的使
   用手册，按 m emacs <Return> 就可以了.如果你之前从没用
   过 Info 系统，那么请按“?”，Emacs 会带你进入 Info 的使
   用指南.在看完本快速指南之后，Emacs Info 会成为你的主要
   参考文档.





* 更多教程相关,和教程注释


** 总结（CONCLUSION）


   要退出 Emacs 请用 C-x C-c.

   本文完全是为零起点新手所写的起步教程.如果你觉得哪里还看不明白，千万不
   要怀疑自己，那一定是我们没有写好.我们永远欢迎你的不满和抱怨.


** 翻译（TRANSLATION）
   ---------------------

   翻译：孙一江 <sunyijiang@gmail.com>
   维护：薛富侨 <xfq.free@gmail.com>
   校对：水木社区（www.newsmth.net）Emacs 板众多网友及众多 Emacs 中文用户

   Emacs 快速指南（Tutorial）早有两个刘昭宏的中文译本，繁简各一.其简体版本
   （TUTORIAL.cn）基本由繁体版本（TUTORIAL.zh）经词语替换而得.然而繁简中文
   不仅在用词习惯上有所不同，更有诸多表达方式与句法方面的差异，因此一直以来
   用户使用 TUTORIAL.cn 都会略觉生硬和晦涩.这次重新翻译 TUTORIAL.cn 的动机
   正是源于这种体验，希望我们的工作能够让本文更好地发挥其作用.TUTORIAL.zh
   的译文质量很高，在翻译过程中给予过我们许多借鉴和参考，在此对刘昭宏的工作
   表示感谢.

   翻译过程中最大的挑战莫过于术语译词的选择了.经过水木社区 Emacs 板热心
   网友小范围内的讨论，我们选择了现在的译法.用户的广泛参与是自由软件生命
   力的源泉，所以如果你有任何建议、勘误或想法，请用你喜欢的方式向我们提出.
   你可以通过电子邮件直接联系维护者，也可以放到 GNU Emacs 的开发邮件列表
   或者水木社区的 Emacs 板上进行讨论.

   下面列出主要术语的译词对照，并给出注释说明：

   command               命令
   cursor                光标
   scrolling             滚动
   numeric argument      数字参数
   window                窗格 [1]
   insert                插入
   delete                删除 [2]
   kill                  移除 [2]
   yank                  召回 [2]
   undo                  撤销
   file                  文件
   buffer                缓冲区
   minibuffer            小缓冲
   echo area             回显区
   mode line             状态栏
   search                搜索
   incremental search    渐进式搜索 [3]

   对于其他没有提到的术语，读者可以参考 Emacs 使用手册里的术语表.

   [1] “window”一词在计算机相关的领域一般都被译为“窗口”.但是在 Emacs
   中，还有一个“frame”的概念.在被广泛使用的 X 窗口系统和微软的视窗
   （Windows）系列操作系统中，Emacs 的一个“frame”就是一个“窗口”，因
   此把 Emacs 中的“frame”译成“窗口”更加符合通常的习惯.这样，Emacs
   中的“window”就只能译成“窗格”了.我们认为 Emacs 中 window 和
   frame 的关系用窗格和窗口来类比是十分形象的.

   《学习GNU Emacs》（第二版）一书对“window”和“frame”的翻译与本教程
   刚好相反（分别译作“窗口”和“窗格”）.在此特别注明，以消除可能产生
   的疑惑.（感谢李旭章 <lixuzhang@gmail.com> 指出）

   [2] 对于“delete”和“kill”的区别，正文已经给出了详细的说明.“删除”和
   “移除”相比较起来，前者更多地隐含着“破坏”和“不可恢复”的意思，而
   后者更多地隐含着“被转移”和“可恢复”的意思.因此分别选择它们作为上
   述两词的译词，希望能够体现出区别.“yank”在中文文档中鲜有对应译词出
   现，翻译的困难较大.究其本意是：“a strong sudden pull”（参见韦氏词
   典），即“猛然拉回”.在原文档中 yank 被引申为“将先前移除的东西再移
   回来”这个意思，所以我们选择了“召回”一词与其对应.

   [3] “incremental”一词在计算机著作中广泛出现，被广泛接受的中文译词有两
   个：“增量的”和“渐进的”.“incremental search”翻译成“增量式搜索
   ”或者“渐进式搜索”都讲得通，且都有各自的形象之处.还是参考原文对其
   的解释：“... means that the search happens while you type in the
   string to search for”.意思是之所以称其为“incremental search”，是
   因为“在你输入搜索字符串的过程中，搜索就已经在进行了”.我们认为“增
   量的”更加强调在现有基础上的变化（比如“增量备份”，“增量编译”）；
   而“渐进的”更加强调过程的逐渐发展，也更加符合原文的意思.因此我们选
   择将“incremental search”译作“渐进式搜索”.


** 版权声明（COPYING）
   ---------------------

   This tutorial descends from a long line of Emacs tutorials
   starting with the one written by Stuart Cracraft for the original Emacs.

   This version of the tutorial is a part of GNU Emacs.  It is copyrighted
   and comes with permission to distribute copies on certain conditions:

   Copyright (C) 1985, 1996, 1998, 2001-2018 Free Software Foundation,
   Inc.

   This file is part of GNU Emacs.

   GNU Emacs is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   GNU Emacs is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with GNU Emacs.  If not, see <https://www.gnu.org/licenses/>.

   Please read the file COPYING and then do give copies of GNU Emacs to
   your friends.  Help stamp out software obstructionism ("ownership") by
   using, writing, and sharing free software!

   【下面为版权声明的译文，仅供参考.实际法律效力以英文原文为准.】

   本快速指南沿袭自历史悠久的 Emacs 快速指南，可上溯至 Stuart Cracraft 为最
   初的 Emacs 所作的版本.

   本篇指南是 GNU Emacs 的一部分，并允许在下列条件的约束下发行其拷贝：

   Copyright (C) 1985, 1996, 1998, 2001-2018 Free Software Foundation,
   Inc.

   本文件为 GNU Emacs 的一部分.

   GNU Emacs 为自由软件；您可依据自由软件基金会所发表的GNU通用公共授权
   条款，对本程序再次发布和/或修改；无论您依据的是本授权的第三版，或
   （您可选的）任一日后发行的版本.

   GNU Emacs 是基于使用目的而加以发布，然而不负任何担保责任；亦无对适
   售性或特定目的适用性所为的默示性担保.详情请参照GNU通用公共授权.

   您应已收到附随于 GNU Emacs 的GNU通用公共授权的副本；如果没有，请参照
   <https://www.gnu.org/licenses/>.

   敬请阅读文件“COPYING”，然后向你的朋友们分发 GNU Emacs 拷贝.让我们以使
   用、编写和分享自由软件的实际行动来共同祛除软件障碍主义（所谓的“所有
   权”）！

   ;;; Local Variables:
   ;;; coding: utf-8
   ;;; End:


** 更多精彩（MORE FEATURES）


   想学习更多的使用技巧，Emacs 使用手册（manual）值得一读.你可以读纸版的
   书，也可以在 Emacs 中读（可以从 Help 菜单进入或者按 C-h r）.提两个你
   可能会很感兴趣的功能吧，一个是可以帮你少敲键盘的 completion（自动补全），
   另一个是方便文件处理的 dired（目录编辑）.

   Completion 可以替你节省不必要的键盘输入.比如说你想切换到 *Message* 缓
   冲区，你就可以用 C-x b *M<Tab> 来完成.只要 Emacs 能够根据你已经输入的
   文字确定你想要输入的内容，它就会自动帮你补齐.Completion 也可用于命令
   名和文件名.有关 Completion 的详细说明可以在 Emacs Info 中的
   “Completion”一节里找到.

   Dired 能够在一个缓冲区里列出一个目录下的所有文件（可以选择是否也列出子
   目录），然后你可以在这个文件列表上完成对文件的移动、访问、重命名或删除
   等等操作.Dired 也在 Emacs 使用手册中有详细介绍，参见“Dired”一节.

   Emacs 使用手册里还有许许多多的精彩功能等着你来了解.

** .login
是csh的配置文件


** .bash_profile
是bash特有的
bash会在用户主目录依次查找
.bash_profile, .bash_login, .profile
并用找到的第一个作为自己的配置文件.


** .bashrc
也是bash特有的初始化文件，
但它与.bash_profile不同在于.bash_profile在login方式进入bash时加载
而.bashrc实在非login方式进入bash时加载.


** 另外 
如果bash使用sh命令启动的(例如将sh作为bash的一个链接时), 就会以sh兼容方式运行使用.profile
