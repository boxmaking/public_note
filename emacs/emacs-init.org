#+SETUPFILE: ~/.emacs.d/org-other-file/org-level-1.org
#+TITLE: emacs-配置文件
#+KEYWORDS: emacs,emacs-init.el
#+LANGUAGE: zh-CN
#+DATE:<2025-02-09/Sunday 18:49:55>

 [[./emacs-init.png]]

* load,load-file
1. 加载文件,在默认的配置文件中加载的文件
   #+BEGIN_SRC lisp 
     (add-to-list 'load-path "~/.emacs.d/loadfile/")
     (require '***-***)
   #+END_SRC

2. 想要被加载,插件的.el文件最后一定要proide
   #+BEGIN_SRC lisp
  (provide '***-***)
   #+END_SRC
   
** 关于这些加载项目的差别可以在这个网站查看
http://ergoemacs.org/emacs/elisp_library_system.html


* 配置文件不用重启就起效
1. 打开配置文件
   C-x C-e (eval-last-sexp)光标前面的运行一条语句,立即生效
   M-x eval-buffer 执行当前buffer内的Elisp代码
   M-x eval-region 执行region内的代码
 
2. 都是立即生效，可以马上试验一条语句的效果
   #+BEGIN_SRC lisp
   (setq frame-title-format "emacs@%b") 
   #+END_SRC

   
* 我的配置文件
#+INCLUDE: "~/.emacs.d/init.el" src lisp


* 默认的一些配置
#+INCLUDE: "~/.emacs.d/loadfile/pengshao-default.el" src lisp


* org-mode相关的两个配置
#+INCLUDE: "~/.emacs.d/loadfile/pengshao-org-mode.el" src lisp
#+INCLUDE: "~/.emacs.d/loadfile/pengshao-org-publish.el" src lisp


* 我比较喜欢些东西加入日期,第二个是加入月相和济南天气,calendar的配置我不太用.
#+INCLUDE: "~/.emacs.d/loadfile/pengshao-insert-date.el" src lisp
#+INCLUDE: "~/.emacs.d/loadfile/pengshao-openweather.el" src lisp -n
#+INCLUDE: "~/.emacs.d/loadfile/pengshao-calendar.el" src lisp


* 关于复制粘帖的一些设置
#+INCLUDE: "~/.emacs.d/loadfile/pengshao-copy-cut-paste-killring.el" src lisp


* 我的键配置(主要是f1-f10)
#+INCLUDE: "~/.emacs.d/loadfile/pengshao-key-building.el" src lisp


* 备份相关的设置
#+INCLUDE: "~/.emacs.d/loadfile/pengshao-backup.el" src lisp


* 启动页面*scratch*显示特定内容
将以下代码添加到你的 Emacs 配置文件中：
#+BEGIN_SRC lisp
  ;; 定义示例函数
  (defun my-first-function ()
    "返回一个字符串。"
    "这是第一个函数返回的内容。")
  (defun my-second-function ()
    "打印一条消息。"
    (message "这是第二个函数打印的消息。"))

  ;; 在 Emacs 启动时清空 *scratch* 缓冲区并调用函数
  (setq initial-scratch-message "")
  (with-current-buffer "*scratch*"
    (let ((result1 (my-first-function)))
      (insert (format "第一个函数的结果: %s\n" result1)))
    (call-interactively 'my-second-function))
  #+END_SRC 
** 代码解释
1. 函数定义：定义了 =my-first-function= 和 =my-second-function= 两个函数。
   清空初始消息：=setq initial-scratch-message= "" 用于清空 *scratch* 缓冲区的默认初始消息。
   切换到 *scratch* 缓冲区：with-current-buffer "*scratch*" 确保后续操作都在 *scratch* 缓冲区进行。

2. 调用第一个函数：
   =(let ((result1 (my-first-function))) ...)= 调用 =my-first-function= 并将结果存储在 =result1= 变量中。
   =(insert (format "第一个函数的结果: %s\n" result1))= 将第一个函数的结果格式化并插入到 *scratch* 缓冲区。

3. 调用第二个函数：=(call-interactively 'my-second-function)= 交互式地调用 =my-second-function=，该函数会在消息区打印一条消息。

   
* frame-title-format设置相关

** 我的设置
#+BEGIN_SRC lisp
;; buffer name (if the buffer isn't visiting a file)
(setq frame-title-format
      '("" " 上马提枪, 去干他娘 - "
        (:eval (if (buffer-file-name)
                   (abbreviate-file-name (buffer-file-name)) "%b"))))
#+END_SRC


** frame-title-format选项相关

#+BEGIN_EXAMPLE
A string is printed verbatim in the mode line except for %-constructs:
(%-constructs are allowed when the string is the entire mode-line-format
or when it is found in a cons-cell or a list)
%b -- print buffer name.      %f -- print visited file name.
%F -- print frame name.
%* -- print %, * or hyphen.   %+ -- print *, % or hyphen.
%& -- is like %*, but ignore read-only-ness.
%  -- means buffer is read-only and * means it is modified.For a modified read-only buffer, %* gives % and %+ gives *.
%s -- print process status.
%p -- print percent of buffer above top of window, or Top, Bot or All.
%P -- print percent of buffer above bottom of window, perhaps plus Top,or print Bottom or All.
%m -- print the mode name.
%n -- print Narrow if appropriate.
%z -- print mnemonics of buffer, terminal, and keyboard coding systems.
%Z -- like %z, but including the end-of-line format.
%[ -- print one [ for each recursive editing level.  %] similar.
%% -- print %.   %- -- print infinitely many dashes.
Decimal digits after the % specify field width to which to pad.
#+END_EXAMPLE


* 配置目录的文件树
[https://github.com/boxmaking/.emacs.d]

#+BEGIN_EXAMPLE
./loadfile/
├── pengshao-backup.el
├── pengshao-calendar.el
├── pengshao-copy-cut-paste-killring.el
├── pengshao-default.el
├── pengshao-insert-date.el
├── pengshao-key-building.el
├── pengshao-openweather.el
├── pengshao-org-mode.el
└── pengshao-org-publish.el

#+END_EXAMPLE
